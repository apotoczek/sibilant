;; init sample input array
(var input ["jkl" "jkl" "ghi" "jkl" "mno" "jkl" "foobar" "pqr" "abc" "mno" "abc" "abc" "ghi" "jkl" "ghi" "mno" "pqr" "def" "pqr" "def" "pqr" "abc" "jkl" "def" "pqr" "abc" "mno" "def" "def" "abc" "ghi" "jkl" "mno" "mno" "ghi" "abc" "ghi" "ghi" "def" "abc" "ghi" "pqr" "abc" "abc" "ghi" "jkl" "mno" "pqr" "pqr" "mno" "ghi" "abc" "abc" "abc" "pqr" "ghi" "ghi" "jkl" "ghi" "def" "pqr" "pqr" "mno" "jkl" "mno" "mno" "abc" "def" "mno" "abc" "pqr" "mno" "mno" "jkl" "def" "mno" "ghi" "jkl" "jkl" "mno" "ghi" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl" "jkl"])

;; init helper functions and variables
(def inc (x) (+ x 1))  ;; increment by 1
(def add (x y) (+ x y))  ;; simple add or string concat
(def lpz (y) (+ 0 y))  ;; left pad one 0
(def lpd (s, p, l)  ;; left pad string s with string p until it is length l
    (while (< (length s) l) (assign s (lpz s)))
)
(var pad 1)  ;; padding size for occurrence counts
(var occ [])  ;; occurrences for each unique string

;; init each unique string occurrence to 0
(each (str index) input
    ;; (set input str index)
    (set occ str 0)
)

;; (console.log input)
;; (console.log occ)  ;; just shows each unique occurrence with 0 count

;; count occurrences
(each (str index) input
    (set occ str (inc (get occ str)))
)

(console.log occ)


;; (var padded (lpd (String 88) "0" 6))

;; (console.log padded)

(each k (keys occ)
    (var len (length (String (get occ k))))
    (if (> len pad) (assign pad len))
)
(assign pad (inc pad))  ;; ensure pad is one gt actual max occurrence count so all start with 0
;; (console.log pad)

(var out [])  ;; output array sorted by occurrences
(var i 0)  ;; index for output array
(each k (keys occ)
    (set out i (add (lpd (String (get occ k)) "0" pad) k))  ;; left pad counts with 0s
    (assign i (inc i))
)
;;(console.log out)

(assign out (.reverse (.sort out)))  ;; sort by occurrence counts desc

(console.log out)

(macro splitStr (arr) '(.slice @arr pad))
(macro splitOcc (arr) '(.slice @arr 0 pad))

(var ret [])
(each occurrence out
    (set ret (splitStr occurrence) (parseInt (splitOcc occurrence)))
)
(console.log ret)





























